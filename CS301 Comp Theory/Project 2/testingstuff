#lang racket

;; Useful helper functions
; x=element, S=set
(define (contains? x S)
  (cond ((null? S) false)
        ((equal? x (car S)) true)
        (else (contains? x (cdr S)))))

(define (implies P Q)
  (or (not P) Q))

;; Universe definitions
(define A '(hutchinson hearne fizzano 241 301 474 493 dennis doris spruce redwood rose))
(define altA (list 1 2 3))

;; Relation definitions
(define is-faculty '((hutchinson) (hearne) (fizzano)))
(define is-course '((301) (241) (474) (493)))
(define is-student '((dennis) (doris)))

; (a,b,c) means faculty member a teaches course b to student c
(define teaches-to '((hutchinson 301 dennis) (hutchinson 241 doris) (hearne 301 doris) (hearne 493 dennis) (fizzano 474 doris))) 
(define is-person '((hutchinson) (hearne) (fizzano) (dennis) (doris)))
(define is-tree '((spruce) (redwood)))
(define is-plant '((spruce) (redwood) (rose)))
(define taller-than '((redwood spruce) (redwood doris) (redwood dennis) (spruce doris) (spruce dennis) (dennis doris)))

; altR matches altA (useful for testing binary relations)
(define altR (list (cons 1 2) (cons 1 3) (cons 2 2) (cons 3 3) (cons 3 1) (cons 1 1) (cons 2 3)))

;; Predicate definitions
(define (is-faculty? x)
  (contains? (list x) is-faculty))

(define (is-course? x)
  (contains? (list x) is-course))

(define (is-student? x)
  (contains? (list x) is-student))

(define (teaches-to? prof course student)
  (contains? (list prof course student) teaches-to))

(define (is-person? x)
	(contains? (list x) is-person))

(define (is-tree? x)
  (contains? (list x) is-tree))

(define (is-plant? x)
  (contains? (list x) is-plant))

(define (taller-than? x y)
	(contains? (list x y) taller-than))


;;;;;;;;;;;;;;;;;;; Begin stuff we wrote ;;;;;;;;;;;;;;;;;;;;
(define (permutations A s) 
    (if (zero? s)
        '(())
        (append-map (lambda (p)
                      (map (lambda (e) (cons e p)) A))
                    (permutations A (sub1 s)))))

(define (predicate-logic A quant func)
   (filter (lambda (x) (apply func x)) (permutations A (length quant))))

;take list of lists
;  take first element of each and put into list.
;  take 2nd element of each put into different list.
;  do k times.
;  combine
(define (makesublists listoflist)
  (define (helper listoflist)
    (if (or (null? listoflist) (< (length (car listoflist)) 1) (< (length (cdr listoflist)) 1 ))
        '()
        (append  (list (car (car listoflist))) (helper (cdr listoflist)))))
  (if (< (length  listoflist) 1)
      '()
  (append (list (helper listoflist)) (makesublists (map cdr listoflist)))))
(makesublists (list (list 1 4) (list 2 5)))
  
;(predicate-logic altA (list 'forall) (lambda (x) (even? (car x))))

(define (wff1)
  (predicate-logic A (list 'forall) 
                   (lambda (x) (implies (is-tree? x) (is-plant? x)))))

(define (wff2)
        (predicate-logic A (list 'exists 'forall)
                         (lambda (x y) (implies (is-plant? y) (and (is-tree? x) (not (taller-than? y x)))))))

; I think this is right... Sort of uncertain if and statements allow this many args
(define (wff3)
  (predicate-logic A (list 'exists 'exists)
                   (lambda (x y) (and (is-tree? x) (not (is-tree? y)) (taller-than? y x)))))

(define (wff4)
  (predicate-logic A (list 'forall)
                   (lambda (x) (implies (is-student? x) (is-person? x)))))

(define (wff5)
  (predicate-logic A (list 'exists)
                   (lambda (x) (and (is-faculty? x) (is-student? x)))))

(define (wff6)
  (predicate-logic A (list 'exists 'exists 'exists)
                   (lambda (x y z) (and (is-faculty? x) (is-student? y) (is-course? z) (teaches-to? x z y)))))

  
(wff4)